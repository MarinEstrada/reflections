INITIALIZING REPOSITORY
Reflections: having initialized my first git repository
Not going to lie, I'm feeling pretty fly, like flying in da sky, word

Sick rhymes aside, its pretty cool. I used the command "git init" in my chosen folder where I wished to create a prrepository. I then checked on the status of the repository by typing in "git status"
I actually created the folder as well as 2 new reflection text files (for lesson 2 and 3) to do this. None of the files are being trackd by the repository yet, and it feels pretty intuitive on how to do ( i mean git status litterally tells me how to get git to track a file) but going to wait for the lesson people to tell me how to do it.

Forgot to mention...
What happens when you initialize a repository?
basically a hidden file (one that biegins with a period) gets created to store meta data (whatever that means) of all the coppies and changes one makes and commits! This is stored in the hidden file ".git"
* I meant hidden folder not hidden file

So now I'm adding stuff to the git repository
There are 3 things to think of:
Working directory - Staging area - Repository
Working directory = my hard drive
Staging area = Intermediate stage
Repository = the area where stuff gets commited

I can add stuff to my staging area (to later be commited) by using the command git add
then I can use git status to see what will be commited if I were to cmake a commit!
Note that If i fuck up, I can reset my staging area using the command "git g.:
If i were to add 'file1.txt' and 'file2.txt' to my staging area, but then changed my mind and only wanted to have 'file1.txt' in my staging area... I could remove the other file by using the command 'git reset file2.txt'

Reflections: How is staging area different from working directory and repository
I suppose its sort of like limbo, its no onget purely apart of the working directory, but its fate is not certain. will it be commited? Will it change further before being commited? no one knows~ 
well we do know. but ...you know. 
i guess the repository is pretty set in stone, or.. photo. its like a collection of snapshots from multiple points in time that we can always go back to. while the working directory is thee now, and the staging area is the view of any of those snapshots from the repository? I'm not too sure now to be honest. But I hope thats right!

Reflections: Time to commit!
I can commit whatever I have in the staging area using:
"git commit" (which will open up my chosen editor to write my message)
or
'''
git commit -m "Commit Message"
''' where my 'Commit message' is whatever the message is supposed to be

At first the commmit didn't work opening my main editor. for some reason git bash refuses to work to open 'sublime-text.exe' however when i editted my core edditor (this viewable via command 'git config --list' to open 'subl.exe' it works great!
It should be noted, that if you close the window without writing anything, the commit will be aborted (empty lines do not count as writing something)

even if you hit enter (i.e.: creating new line characters), if there is nothing else then the commit will still be aborted
wait.. actually new lines may in fact = something written... you need to save the commit?
after commit is made: the staging area will be empty unless a tracked file has changes made to it or another file is added in (viewable via 'git status')

UPDATE TO WHAT IS STAGING AREA AND OTHERS
repository: collection of commits
staging area: copy of the most recent commit until i add files to it
working directory: basically my hard drive 

so... what if i make changes , but haven't added them or commited them yet? I can  use 'git diff' with no additional arguments and it will show the differences between my staging area and my working directory, when i add something to my staging area, there will no longer be a difference between the two (until i make more changes) and it diff will no longer show the changes. cool!

if I want to see the difference between my most recent commit (i.e.: the repository) and my staging area, use the command 'git diff --staged'

Reflections: 'git reset --hard'
BEWARE, if you use this, any changes made in your staging area AND in your working directory, will be reversed. maybe better to not use.
If you wish to use something from staging area, do not use git reset (might have unforceen consequences)
instead use THE FOLLOWING COMMAND:
"git restore --staged <file>..." to unstage

Reflect:How can I use the staging area to make sure I have one logical change per commit.
even if i have created more than one logical change in the working directory, by using the staging area i can add in each logical change one at a time (if i keep things organized) as its own commit

Reflections: Branches
You can use branches to test out new features, or experemental changes
to see what branches are available in a repository, do 'git branch' with no extra arguments, the branch with the asterisk is the one you are currently on.
to create a new branch, use the command 'git branch BRANCH_NAME'

don't forget, when you want to work on a particular branch, use 'git checkout BRANCH_NAME'
using branches would helpful for organizing different potential ideas and directions a project might head
if you want a better view of how your branches are organized, use the following line of code/command
"git log --graph --oneline branch1 branch2"
--oneline makes it easier to read, and then after that input all the branch names you wish to see as arguments
note that if you are wanting to create a new branch and then use checkout... instead of preforming 2 commands ( 'git branch newbranch' then 'git checkout newbranch')...
you can just do it all in one command:
'git checkout -b newbranch'

Reflect: How do diagrams help one visualize the branch structure.
basically helps take it away from the abstract to a more tangible form in óne's mind's eye

Note: After you 'clone' a repository, the head which appears will forever be known as 'origin', if you add a commit afterwards, the tip may change but you will still have the reference of 'origin'
Neat!

Reflection on merging branches:
you can merge branches using the command:
'git merge branch1 branch2' this will merge all the named branches into whatever branch you currently have checked out
if you want to just merge branch 2 in to branch 1, checkout branch 1 and type:
'git merge branch2', or if you want to keep mental track of stuff 'git merge branch1 branch2'
when the branches are merged, they will be organized in 'git log' via timestamp. If you want to commpare a particular commit against its parent without having to hunt down which is the parent, just use 'git show ID' 
now that you've merged the brances, if you want you can use 'git branch -d branchName' to delete the name of the branch, this won't delete the commits, it will just delete the branch name (making it potentially hard or impossible to find the commits if you haven't merged them yet)
NOTE: if you fuck up you can always just recreate the name that you just deleted!

Auto commiting vs manual commiting
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
when auto committing is super easy and just done, but its important to have the warning for manual commiting so that there aren't any disasterous or redundant conflicts in code!.

IF THERE IS A CONFLICT IN MERGING:
open up the file and see that the area of conflict has been seperated into three sections. 
the 1st:
	head will refer to the changes you have made in the current checked out branch
the 2nd:
	will refer to the original code from before the branches branched off/split
the 3rd: will refer to the changes present in the branch that is merging into the currently checked out branch.
NOTE:
You may have to change something outside of these sections to fix the resulution, the reason is a change may have been made that didn't cause a conflict, e.g.: say one of the conflicts refer to a new function created elsewhere that didn't make a conflict warning.


Side note, if you only want to see the last... say 3 commits. use the code 'git log -n3'

