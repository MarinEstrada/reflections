LESSON 4: Using github
learning how to transfter files from local repository onto github
STEPS:
1 create an empty repository on github this is going to be a remote repository, which is more comonly known as "remotes"
	you can push and pull data from remots, what you send and receive are in the form of commits.

	BUT instead of sending individual commits, the most common way to push and pull data is by pushing/pulling a branch, thus getting all the commits associated with that branch
		Note: if a commit already exists in one of the repositories it will not resend that commit, only all the new commits not yet associated with the branch.
		it would be innificient to resend each commit over and over each time

create empty repository on github (using the plus sign) 
	if you were to be creating an empty repository an would have no commits to put in, then initialize with readme. Otherwise not needed

On you command line, use 
'git remote' 
to see what remotes (remote repositories) exist

to add a repo, use the following command:
'git remote add REMOTE_NAME URL'
remote name -> if you only have one remote for that repository its standard to name it 'origin', 
the url will be available via github. copy and paste

afterwards, to verify that the url was added correctly... use the following command:
'git remote -v'
-v = verbose

from local to remote!
use command 
'git push -u REMOTE_NAME BRANCH_NAME'
-u = sets the branch you are curently pushing as upstream, this is good for branches such as the master branch

note you can also add commits to remote directly on github!

to pull from remote onto local repo, use the same format but with the pull command
i.e.:
'git pull REMOTE_NAME BRANCH NAME'
if you just want to pull from the pustream, 'git pull' is enough

REFLECTIONS:
When would you want to use a remote repository rather than keeping all your work local?

	This would be ideal when you don't have access to your personal computer

REFLECTIONS: Remote vs Manual pull
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	in cases where you are working in a group, if a group member adds something and it automatically gets pulled into your local repo, then your work might get lost if you were working on a different version of the same new commit. its better to just manually pull when you think its a good idea.

FORKS:
forks are basically clones of remotes on github, that gives credit to the original creator! After you create a fork, you can grab the url from your own profile to clone the repo onto your local computer

NOTE: when you use 'git clone URL', github automatically sets up a remote for you, so you don't need to do so yourself! 

REFLECTION:
Describe the differences between forks, clones, and branches. When would you use one instead of another?

	branches: different variation of the 'master' that exists in the same repo

	clone: copy of a repo (which may then be eddited) that was either coppied from...
		github onto your local disk
		or
		from your local disk onto another location in your local disk

	fork: a clone from a repo on github, onto your own repo on github, which credits the creator. 
	You can then clone it from your github onto your local disk.

FETCH
what to do when you need to merge github repository with your local repository
is used to update the local COPY (not the local version which youre working on) of your local repository.essentially creating a new branch on your local. 
Then you can compaire the two and fix any conflicts which may arise whether you be offline or not
NOTE:
	'git fetch origin' + 'git merge master origin/master'
	IS THE SAME AS
	'git pull origin master'


If git pull == (git fetch + git merge)...
Why haven't we been getting merge messages?
Answer: FAST FORWARD MERGES
	
	When the branch youre merging into is an ancestor of the branch youre merging from

	Basically, if you try and merge two commits, where the branch your merging into, is an ancestor of the branch youre merging from, then there is no point in doing the merge message (the merge message is so that the new merge has all the info from both commits) because one of those commits already has all the info for both!
	SO... all you have to do is update the lable to point to the most recent of the two (aka: the parent) to be the tip

REFLECTION: Local copies of Remote branches
What is the benefit of having a copy of the last known state of the remote stored locally?

	If you ever mess up, you can always go back to the local copy
	if you ever need to work while offline, you can fetch to have the latest update, then work offline and figure out the details when you have more time


PULL REQUESTS
i.e.: make a seperate branch locally, push change to github, ask colaborator to check, if eveyone is happy we merge it into the master branch
	DETAILS:
	-make the seperate branch locally
	-make changes
	-commit them
	-push them using command:
		'git push origin SEPERATE_BRANCH_NAME'
	-go to github, switch to the newbranch
	-create pull request
		-make sure you're requesting to be pulled into the correct base!
	-other person reviews
	-will either say no, or yes
	-if there is a conflict, they will ask you to merge into your own branch first and will want to see how you resolve the conflict

REFLECTION: Collaboration using Git and GitHub
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I'd probably be sending files via email, back and forth. it would be easier in the sense that there is nothing new to learn, 

	But harer in that it would be more difficult to actually spot ALL the changes made, and if one wished to role back it would also be harder. not to mention the amount of save space it would take to have all those files, and actually even sending the files would be troublesom if one had to do it by email and it was a huge project! also one doesn't know if osmeone else is also makeing changes and ... yeah its harder...

